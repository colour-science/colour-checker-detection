"""
Define the unit tests for the
:mod:`colour_checker_detection.detection.segmentation` module.
"""

import glob
import os
import platform

import numpy as np
from colour import read_image

from colour_checker_detection import ROOT_RESOURCES_TESTS
from colour_checker_detection.detection import (
    detect_colour_checkers_segmentation,
    segmenter_default,
)

__author__ = "Colour Developers"
__copyright__ = "Copyright 2018 Colour Developers"
__license__ = "BSD-3-Clause - https://opensource.org/licenses/BSD-3-Clause"
__maintainer__ = "Colour Developers"
__email__ = "colour-developers@colour-science.org"
__status__ = "Production"

__all__ = [
    "DETECTION_DIRECTORY",
    "PNG_FILES",
    "TestSegmenterDefault",
    "TestDetectColourCheckersSegmentation",
]

DETECTION_DIRECTORY = os.path.join(
    ROOT_RESOURCES_TESTS, "colour_checker_detection", "detection"
)

PNG_FILES = sorted(glob.glob(os.path.join(DETECTION_DIRECTORY, "IMG_19*.png")))


class TestSegmenterDefault:
    """
    Define :func:`colour_checker_detection.detection.segmentation.\
segmenter_default` definition unit tests methods.
    """

    def test_segmenter_default(self):
        """
        Define :func:`colour_checker_detection.detection.segmentation.\
segmenter_default` definition unit tests methods.
        """

        # Skipping unit test when "png" files are missing, e.g., when testing
        # the distributed "Python" package.
        if len(PNG_FILES) == 0:
            return

        # TODO: Unit test is only reproducible on "macOs", skipping other OSes.
        if platform.system() in ("Windows", "Microsoft", "Linux"):
            return

        colour_checkers_rectangles = [
            np.array([[[671, 578], [675, 364], [994, 370], [990, 584]]]),
            np.array([[[358, 691], [373, 219], [1086, 242], [1071, 713]]]),
            np.array([[[571, 670], [575, 357], [1045, 364], [1040, 676]]]),
            np.array([[[616, 605], [617, 310], [1056, 312], [1055, 607]]]),
            np.array([[[639, 333], [795, 333], [795, 437], [639, 437]]]),
            np.array([[[759, 654], [762, 288], [1009, 290], [1006, 657]]]),
        ]

        for i, png_file in enumerate(PNG_FILES):
            np.testing.assert_array_equal(
                segmenter_default(read_image(png_file)),
                colour_checkers_rectangles[i],
            )

        (
            colour_checkers,
            clusters,
            swatches,
            segmented_image,
        ) = segmenter_default(read_image(PNG_FILES[0]), additional_data=True).values

        np.testing.assert_array_equal(
            colour_checkers,
            colour_checkers_rectangles[0],
        )

        np.testing.assert_array_equal(
            clusters,
            np.array([[[671, 578], [675, 364], [994, 370], [990, 584]]]),
        )

        np.testing.assert_array_equal(
            swatches,
            np.array(
                [
                    [[886, 575], [887, 531], [931, 532], [930, 576]],
                    [[835, 574], [836, 530], [880, 531], [879, 575]],
                    [[782, 572], [784, 528], [829, 530], [828, 573]],
                    [[732, 571], [732, 527], [777, 529], [776, 572]],
                    [[681, 570], [682, 526], [726, 527], [725, 571]],
                    [[939, 525], [940, 481], [984, 483], [982, 526]],
                    [[887, 524], [887, 479], [933, 481], [932, 525]],
                    [[835, 523], [836, 478], [881, 480], [879, 524]],
                    [[784, 522], [784, 477], [829, 478], [829, 523]],
                    [[733, 521], [733, 477], [778, 479], [777, 522]],
                    [[683, 518], [684, 478], [726, 479], [725, 519]],
                    [[939, 474], [939, 429], [986, 431], [985, 475]],
                    [[888, 473], [889, 429], [934, 430], [933, 474]],
                    [[837, 472], [837, 428], [882, 430], [881, 473]],
                    [[785, 471], [785, 427], [831, 428], [830, 473]],
                    [[734, 470], [734, 426], [779, 428], [778, 471]],
                    [[682, 469], [683, 425], [728, 427], [727, 471]],
                    [[941, 423], [941, 378], [987, 380], [986, 424]],
                    [[889, 422], [889, 377], [935, 379], [934, 423]],
                    [[838, 421], [838, 377], [883, 379], [882, 422]],
                    [[786, 420], [786, 376], [831, 378], [830, 421]],
                    [[735, 420], [736, 376], [780, 377], [779, 421]],
                    [[683, 419], [684, 375], [728, 376], [727, 420]],
                ],
            ),
        )

        np.testing.assert_array_equal(
            segmented_image.shape,
            (959, 1440),
        )


class TestDetectColourCheckersSegmentation:
    """
    Define :func:`colour_checker_detection.detection.segmentation.\
detect_colour_checkers_segmentation` definition unit tests methods.
    """

    def test_detect_colour_checkers_segmentation(self):
        """
        Define :func:`colour_checker_detection.detection.segmentation.\
detect_colour_checkers_segmentation` definition unit tests methods.
        """

        # Skipping unit test when "png" files are missing, e.g., when testing
        # the distributed "Python" package.
        if len(PNG_FILES) == 0:
            return

        # TODO: Unit test is only reproducible on "macOs", skipping other OSes.
        if platform.system() in ("Windows", "Microsoft", "Linux"):
            return

        test_swatches = [
            (
                np.array(
                    [
                        [0.24832384, 0.15328871, 0.08390528],
                        [0.41702515, 0.25749645, 0.15524487],
                        [0.21561633, 0.19969578, 0.18122309],
                        [0.19740796, 0.17287970, 0.06432715],
                        [0.27344641, 0.20384602, 0.19483535],
                        [0.23397270, 0.28900445, 0.18982877],
                        [0.45813102, 0.23316218, 0.05019258],
                        [0.18077616, 0.16044182, 0.20741640],
                        [0.39589149, 0.16688588, 0.11324922],
                        [0.19540378, 0.11008169, 0.11556859],
                        [0.31544343, 0.29114881, 0.02143807],
                        [0.43209532, 0.25869009, 0.00787305],
                        [0.13758199, 0.12513705, 0.17688018],
                        [0.18623975, 0.24561603, 0.07675899],
                        [0.35410595, 0.13109550, 0.07380734],
                        [0.46201417, 0.32264873, 0.00161150],
                        [0.37113908, 0.15819809, 0.16307078],
                        [0.11848511, 0.20048647, 0.18547057],
                        [0.50230736, 0.41071275, 0.28996509],
                        [0.41354591, 0.33473289, 0.23615897],
                        [0.32904309, 0.26473308, 0.18369149],
                        [0.23612073, 0.18612471, 0.12523490],
                        [0.16774438, 0.13109615, 0.08313587],
                        [0.10746267, 0.07903580, 0.04796651],
                    ],
                ),
            ),
            (
                np.array(
                    [
                        [0.36000499, 0.22310828, 0.11760835],
                        [0.62583089, 0.39448667, 0.24166533],
                        [0.33197999, 0.31600377, 0.28866866],
                        [0.30460060, 0.27332100, 0.10486555],
                        [0.41751358, 0.31914026, 0.30789137],
                        [0.34866226, 0.43934596, 0.29126382],
                        [0.67983997, 0.35236534, 0.06997226],
                        [0.27118555, 0.25352538, 0.33078724],
                        [0.62091863, 0.27034152, 0.18652563],
                        [0.30716130, 0.17978874, 0.19181632],
                        [0.48547146, 0.45855859, 0.03294956],
                        [0.65076780, 0.40023172, 0.01607676],
                        [0.19286253, 0.18585181, 0.27459183],
                        [0.28054565, 0.38513032, 0.12244410],
                        [0.55454308, 0.21436104, 0.12549178],
                        [0.72068894, 0.51493925, 0.00548734],
                        [0.57729208, 0.25771791, 0.26855531],
                        [0.17289193, 0.31637919, 0.29508531],
                        [0.73940831, 0.60953134, 0.43830720],
                        [0.62816709, 0.51759964, 0.37215686],
                        [0.51360977, 0.42048824, 0.29857090],
                        [0.36953217, 0.30218402, 0.20827036],
                        [0.26286703, 0.21493268, 0.14277342],
                        [0.16102524, 0.13381621, 0.08047409],
                    ],
                ),
            ),
            (
                np.array(
                    [
                        [0.34738940, 0.22210284, 0.12043952],
                        [0.58209461, 0.37278461, 0.23478897],
                        [0.31616706, 0.30381790, 0.27724868],
                        [0.30311552, 0.27459133, 0.11836217],
                        [0.42153537, 0.32409266, 0.30891716],
                        [0.35749745, 0.43314731, 0.29142639],
                        [0.62254763, 0.32615680, 0.07393268],
                        [0.25821960, 0.23580971, 0.30404219],
                        [0.57693988, 0.25513524, 0.17670268],
                        [0.30006823, 0.18381491, 0.18989067],
                        [0.48401743, 0.45359546, 0.05218942],
                        [0.64574641, 0.39810193, 0.02945640],
                        [0.18849514, 0.17575365, 0.25011680],
                        [0.26373467, 0.35204440, 0.11400889],
                        [0.51626253, 0.20278455, 0.11849582],
                        [0.68842602, 0.49205878, 0.00377697],
                        [0.56539935, 0.25597996, 0.26512200],
                        [0.19216073, 0.31681597, 0.29429549],
                        [0.69482410, 0.56909364, 0.40155384],
                        [0.58873069, 0.48006463, 0.34068954],
                        [0.48271653, 0.39254814, 0.27525207],
                        [0.35977310, 0.28940114, 0.19704697],
                        [0.26829925, 0.21624289, 0.14619303],
                        [0.18016167, 0.14157206, 0.09355851],
                    ],
                ),
            ),
            (
                np.array(
                    [
                        [0.21938626, 0.12745626, 0.05788294],
                        [0.38446507, 0.23450573, 0.13715136],
                        [0.19894668, 0.18729475, 0.17246076],
                        [0.19457349, 0.17182909, 0.06108425],
                        [0.27911529, 0.21303454, 0.20818119],
                        [0.24418873, 0.30463865, 0.20364814],
                        [0.42587042, 0.21036983, 0.03387973],
                        [0.16159414, 0.14428589, 0.19156294],
                        [0.39223763, 0.16027561, 0.10546608],
                        [0.19678101, 0.11048739, 0.11770962],
                        [0.33779103, 0.31829616, 0.02421810],
                        [0.48373023, 0.29524034, 0.01024585],
                        [0.11387850, 0.10201312, 0.15105924],
                        [0.17331049, 0.22999455, 0.06060657],
                        [0.35458463, 0.12845674, 0.06968934],
                        [0.48692712, 0.34049782, 0.00180221],
                        [0.40718290, 0.17617357, 0.18679525],
                        [0.13581325, 0.23464102, 0.22059689],
                        [0.48099062, 0.37892419, 0.25402117],
                        [0.41220647, 0.32620439, 0.22248317],
                        [0.34211776, 0.27174956, 0.18414445],
                        [0.25703457, 0.20097046, 0.13262188],
                        [0.19677228, 0.15521790, 0.10373505],
                        [0.13552931, 0.10757796, 0.06661499],
                    ],
                ),
            ),
            (
                np.array(
                    [
                        [0.35696816, 0.21930856, 0.11403693],
                        [0.60821688, 0.38355678, 0.23785686],
                        [0.31905305, 0.30316705, 0.27976859],
                        [0.30302200, 0.27013323, 0.10675076],
                        [0.42698881, 0.33104691, 0.32175022],
                        [0.37930825, 0.47598192, 0.32185996],
                        [0.66308343, 0.34331027, 0.04840572],
                        [0.25116241, 0.23189384, 0.31125751],
                        [0.59939826, 0.25615332, 0.17492208],
                        [0.29469380, 0.16788639, 0.18995292],
                        [0.49911833, 0.47258806, 0.02826829],
                        [0.68877059, 0.43108180, 0.00497004],
                        [0.18456072, 0.16787593, 0.25497442],
                        [0.27599725, 0.36154932, 0.11149684],
                        [0.53841883, 0.20049030, 0.12016004],
                        [0.72244716, 0.51131296, 0.00018977],
                        [0.57876974, 0.25831613, 0.27366114],
                        [0.17160977, 0.33335912, 0.31680414],
                        [0.76642007, 0.61226171, 0.42404592],
                        [0.63404596, 0.51218492, 0.36258361],
                        [0.51259273, 0.41126823, 0.28810981],
                        [0.38513792, 0.30572626, 0.20889392],
                        [0.27351549, 0.21982881, 0.15018980],
                        [0.17083944, 0.13807550, 0.08634300],
                    ],
                ),
            ),
            (
                np.array(
                    [
                        [0.52302927, 0.33337167, 0.18533763],
                        [0.88968831, 0.57067597, 0.36026952],
                        [0.47294277, 0.45575163, 0.42374220],
                        [0.44841272, 0.40725341, 0.16428013],
                        [0.61938971, 0.47870743, 0.47080779],
                        [0.53657967, 0.66325128, 0.45389828],
                        [0.94704050, 0.50368863, 0.09376666],
                        [0.36815616, 0.35105297, 0.46465901],
                        [0.86500686, 0.38415903, 0.27185041],
                        [0.43016541, 0.25679177, 0.28029662],
                        [0.70661992, 0.67352915, 0.04775995],
                        [0.96663320, 0.60355937, 0.01704959],
                        [0.27100158, 0.25070760, 0.37777221],
                        [0.39140525, 0.52589625, 0.17211960],
                        [0.76712126, 0.29462230, 0.18415013],
                        [0.99539071, 0.72465611, 0.00130395],
                        [0.81031168, 0.36720258, 0.39325047],
                        [0.23815468, 0.46509922, 0.44485742],
                        [0.99919355, 0.84638172, 0.60809588],
                        [0.87047678, 0.71775925, 0.51714724],
                        [0.70366037, 0.58129185, 0.41761538],
                        [0.52873796, 0.42994583, 0.30210295],
                        [0.37849766, 0.30698854, 0.21497679],
                        [0.23189870, 0.19013362, 0.12126886],
                    ],
                ),
            ),
        ]

        for i, png_file in enumerate(PNG_FILES):
            np.testing.assert_allclose(
                detect_colour_checkers_segmentation(png_file),
                test_swatches[i],
                atol=0.0001,
            )

        (
            swatch_colours,
            swatch_masks,
            colour_checker,
            quadrilateral,
        ) = detect_colour_checkers_segmentation(
            read_image(PNG_FILES[0]), additional_data=True
        )[0].values

        np.testing.assert_allclose(
            swatch_colours,
            test_swatches[0][0],
            atol=0.0001,
        )

        np.testing.assert_array_equal(
            colour_checker.shape[0:2],
            np.array([960, 1440]),
        )

        np.testing.assert_array_equal(
            swatch_masks,
            np.array(
                [
                    [104, 136, 104, 136],
                    [104, 136, 344, 376],
                    [104, 136, 584, 616],
                    [104, 136, 824, 856],
                    [104, 136, 1064, 1096],
                    [104, 136, 1304, 1336],
                    [344, 376, 104, 136],
                    [344, 376, 344, 376],
                    [344, 376, 584, 616],
                    [344, 376, 824, 856],
                    [344, 376, 1064, 1096],
                    [344, 376, 1304, 1336],
                    [584, 616, 104, 136],
                    [584, 616, 344, 376],
                    [584, 616, 584, 616],
                    [584, 616, 824, 856],
                    [584, 616, 1064, 1096],
                    [584, 616, 1304, 1336],
                    [824, 856, 104, 136],
                    [824, 856, 344, 376],
                    [824, 856, 584, 616],
                    [824, 856, 824, 856],
                    [824, 856, 1064, 1096],
                    [824, 856, 1304, 1336],
                ]
            ),
        )

        assert quadrilateral.shape == (4, 2)
