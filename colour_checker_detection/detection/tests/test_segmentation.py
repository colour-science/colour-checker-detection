# !/usr/bin/env python
"""
Define the unit tests for the
:mod:`colour_checker_detection.detection.segmentation` module.
"""

import glob
import os
import platform
import unittest

import numpy as np
from colour import read_image

from colour_checker_detection import ROOT_RESOURCES_TESTS
from colour_checker_detection.detection import (
    colour_checkers_coordinates_segmentation,
    detect_colour_checkers_segmentation,
    extract_colour_checkers_segmentation,
)

__author__ = "Colour Developers"
__copyright__ = "Copyright 2018 Colour Developers"
__license__ = "BSD-3-Clause - https://opensource.org/licenses/BSD-3-Clause"
__maintainer__ = "Colour Developers"
__email__ = "colour-developers@colour-science.org"
__status__ = "Production"

__all__ = [
    "DETECTION_DIRECTORY",
    "PNG_FILES",
    "TestColourCheckersCoordinatesSegmentation",
    "TestExtractColourCheckersSegmentation",
    "TestDetectColourCheckersSegmentation",
]

DETECTION_DIRECTORY = os.path.join(
    ROOT_RESOURCES_TESTS, "colour_checker_detection", "detection"
)

PNG_FILES = glob.glob(os.path.join(DETECTION_DIRECTORY, "IMG_19*.png"))


class TestColourCheckersCoordinatesSegmentation(unittest.TestCase):
    """
    Define :func:`colour_checker_detection.detection.segmentation.\
colour_checkers_coordinates_segmentation` definition unit tests methods.
    """

    def test_colour_checkers_coordinates_segmentation(self):
        """
        Define :func:`colour_checker_detection.detection.segmentation.\
colour_checkers_coordinates_segmentation` definition unit tests methods.
        """

        # Skipping unit test when "png" files are missing, e.g. when testing
        # the distributed "Python" package.
        if len(PNG_FILES) == 0:
            return

        # TODO: Unit test is only reproducible on "macOs", skipping other OSes.
        if platform.system() in ("Windows", "Microsoft", "Linux"):
            return

        colour_checkers_coordinates = [
            (np.array([[640, 333], [793, 333], [793, 436], [640, 436]]),),
            (np.array([[761, 650], [765, 293], [1007, 295], [1004, 653]]),),
            (np.array([[366, 684], [383, 223], [1077, 248], [1061, 709]]),),
            (np.array([[676, 576], [680, 367], [990, 373], [986, 582]]),),
            (np.array([[573, 665], [579, 359], [1039, 367], [1034, 673]]),),
            (np.array([[622, 597], [624, 312], [1048, 315], [1046, 601]]),),
        ]

        for i, png_file in enumerate(PNG_FILES):
            np.testing.assert_allclose(
                colour_checkers_coordinates_segmentation(read_image(png_file)),
                colour_checkers_coordinates[i],
                atol=5,
            )

        (
            colour_checkers,
            clusters,
            swatches,
            segmented_image,
        ) = colour_checkers_coordinates_segmentation(
            read_image(PNG_FILES[0]), additional_data=True
        ).values

        np.testing.assert_allclose(
            colour_checkers,
            colour_checkers_coordinates[0],
            atol=5,
        )

        np.testing.assert_allclose(
            clusters,
            (
                np.array([[627, 482], [783, 482], [783, 580], [627, 580]]),
                np.array([[640, 333], [795, 333], [795, 438], [640, 438]]),
            ),
            atol=5,
        )

        np.testing.assert_allclose(
            swatches,
            (
                [[763, 563], [780, 563], [780, 580], [763, 580]],
                [[740, 563], [757, 563], [757, 580], [740, 580]],
                [[629, 561], [647, 561], [647, 579], [629, 579]],
                [[760, 536], [782, 536], [782, 557], [760, 557]],
                [[732, 535], [754, 535], [754, 557], [732, 557]],
                [[705, 535], [727, 535], [727, 557], [705, 557]],
                [[678, 535], [699, 535], [699, 557], [678, 557]],
                [[650, 556], [650, 534], [672, 534], [672, 556]],
                [[760, 508], [782, 508], [782, 530], [760, 530]],
                [[732, 508], [754, 508], [754, 530], [732, 530]],
                [[705, 508], [727, 508], [727, 530], [705, 530]],
                [[678, 529], [678, 507], [700, 507], [700, 529]],
                [[650, 507], [672, 507], [672, 529], [650, 529]],
                [[697, 485], [714, 485], [714, 502], [697, 502]],
                [[630, 502], [630, 484], [647, 484], [647, 502]],
                [[745, 414], [766, 414], [766, 434], [745, 434]],
                [[719, 414], [740, 414], [740, 434], [719, 434]],
                [[694, 413], [714, 413], [714, 435], [694, 435]],
                [[669, 413], [689, 413], [689, 433], [669, 433]],
                [[643, 413], [663, 413], [663, 433], [643, 433]],
                [[746, 389], [766, 389], [766, 407], [746, 407]],
                [[771, 388], [792, 388], [792, 409], [771, 409]],
                [[720, 388], [740, 388], [740, 408], [720, 408]],
                [[669, 387], [689, 387], [689, 408], [669, 408]],
                [[643, 387], [664, 387], [664, 407], [643, 407]],
                [[746, 364], [766, 364], [766, 383], [746, 383]],
                [[720, 381], [722, 362], [741, 364], [739, 383]],
                [[695, 362], [715, 362], [715, 382], [695, 382]],
                [[669, 362], [689, 362], [689, 382], [669, 382]],
                [[644, 361], [664, 361], [664, 382], [644, 382]],
                [[771, 337], [792, 337], [792, 358], [771, 358]],
                [[746, 337], [766, 337], [766, 357], [746, 357]],
                [[720, 337], [740, 337], [740, 357], [720, 357]],
                [[695, 357], [695, 336], [715, 336], [715, 357]],
            ),
            atol=5,
        )

        np.testing.assert_allclose(
            segmented_image.shape,
            (958, 1440),
            atol=5,
        )


class TestExtractColourCheckersSegmentation(unittest.TestCase):
    """
    Define :func:`colour_checker_detection.detection.segmentation.\
extract_colour_checkers_segmentation` definition unit tests methods.
    """

    def test_extract_colour_checkers_segmentation(self):
        """
        Define :func:`colour_checker_detection.detection.segmentation.\
extract_colour_checkers_segmentation` definition unit tests methods.
        """

        # TODO: Unit test is only reproducible on "macOs", skipping other OSes.
        if platform.system() in ("Windows", "Microsoft", "Linux"):
            return

        colour_checkers_shapes = np.array(
            [
                [(105, 155, 3)],
                [(241, 357, 3)],
                [(463, 696, 3)],
                [(209, 310, 3)],
                [(305, 459, 3)],
                [(284, 426, 3)],
            ]
        )

        for i, png_file in enumerate(PNG_FILES):
            np.testing.assert_allclose(
                [
                    colour_checker.shape
                    for colour_checker in extract_colour_checkers_segmentation(
                        read_image(png_file)
                    )
                ],
                colour_checkers_shapes[i],
                atol=5,
            )


class TestDetectColourCheckersSegmentation(unittest.TestCase):
    """
    Define :func:`colour_checker_detection.detection.segmentation.\
detect_colour_checkers_segmentation` definition unit tests methods.
    """

    def test_detect_colour_checkers_segmentation(self):
        """
        Define :func:`colour_checker_detection.detection.segmentation.\
detect_colour_checkers_segmentation` definition unit tests methods.
        """

        # Skipping unit test when "png" files are missing, e.g. when testing
        # the distributed "Python" package.
        if len(PNG_FILES) == 0:
            return

        # TODO: Unit test is only reproducible on "macOs", skipping other OSes.
        if platform.system() in ("Windows", "Microsoft", "Linux"):
            return

        test_swatches = [
            (
                np.array(
                    [
                        [0.35921775, 0.21974672, 0.11373826],
                        [0.61170453, 0.38223811, 0.23506132],
                        [0.31699433, 0.30329567, 0.28068161],
                        [0.30062402, 0.27086534, 0.10395446],
                        [0.42765329, 0.32979061, 0.32321347],
                        [0.37651571, 0.47334258, 0.32200205],
                        [0.66219833, 0.34269353, 0.05197808],
                        [0.25087396, 0.23144240, 0.30867327],
                        [0.59803160, 0.25718724, 0.17655400],
                        [0.29072088, 0.16862319, 0.18556926],
                        [0.50011747, 0.47132109, 0.02669218],
                        [0.69162823, 0.42877312, 0.00891612],
                        [0.18406819, 0.16636620, 0.25519332],
                        [0.27382752, 0.36089569, 0.11240099],
                        [0.53949638, 0.20005471, 0.11816785],
                        [0.71929229, 0.51006474, 0.00039430],
                        [0.58201000, 0.25834369, 0.27286384],
                        [0.17459366, 0.33211689, 0.31462037],
                        [0.74890687, 0.60181178, 0.41818177],
                        [0.62550942, 0.50636506, 0.35586469],
                        [0.50507406, 0.41105972, 0.28757535],
                        [0.37983909, 0.30265359, 0.20787124],
                        [0.26862558, 0.21718989, 0.14771240],
                        [0.17296679, 0.13739381, 0.08705275],
                    ]
                ),
            ),
            (
                np.array(
                    [
                        [0.52661877, 0.33390523, 0.18513118],
                        [0.88719214, 0.56975287, 0.36187576],
                        [0.47231212, 0.45517357, 0.42484753],
                        [0.44641457, 0.40701556, 0.16383042],
                        [0.61928881, 0.47921490, 0.47194654],
                        [0.53603960, 0.66471400, 0.45367429],
                        [0.94688621, 0.50429289, 0.09571916],
                        [0.37035096, 0.35029038, 0.46444686],
                        [0.86304017, 0.38359153, 0.27170754],
                        [0.43000880, 0.25629303, 0.28155157],
                        [0.70911596, 0.67462002, 0.04686322],
                        [0.96567029, 0.60476842, 0.01810791],
                        [0.26848041, 0.25029797, 0.37943655],
                        [0.39276376, 0.52510734, 0.17521068],
                        [0.76615518, 0.29531580, 0.18060604],
                        [0.99615478, 0.72470275, 0.00184510],
                        [0.81273516, 0.36779556, 0.39294757],
                        [0.23433227, 0.46588089, 0.44498401],
                        [0.99932958, 0.84789681, 0.60709837],
                        [0.87390482, 0.71778395, 0.51724635],
                        [0.70507921, 0.58187965, 0.41834509],
                        [0.53014457, 0.43078569, 0.30347199],
                        [0.37816306, 0.30750085, 0.21542860],
                        [0.23509498, 0.18902577, 0.12444219],
                    ]
                ),
            ),
            (
                np.array(
                    [
                        [0.36039445, 0.22350599, 0.11873420],
                        [0.62714458, 0.39478764, 0.24229150],
                        [0.33165672, 0.31563434, 0.28914776],
                        [0.30480161, 0.27362752, 0.10432182],
                        [0.41683716, 0.31974182, 0.30811438],
                        [0.34742230, 0.44155839, 0.29356793],
                        [0.68121970, 0.35288528, 0.07221610],
                        [0.27225676, 0.25337765, 0.33124942],
                        [0.62068969, 0.27035698, 0.18658416],
                        [0.30677941, 0.17992996, 0.19168894],
                        [0.48666200, 0.45993966, 0.03378791],
                        [0.65246701, 0.40165728, 0.01610205],
                        [0.19140731, 0.18562141, 0.27346352],
                        [0.27903748, 0.38509497, 0.12212852],
                        [0.55395961, 0.21471037, 0.12492916],
                        [0.72143435, 0.51594681, 0.00548300],
                        [0.57832998, 0.25804800, 0.26887447],
                        [0.17814353, 0.31652015, 0.29603240],
                        [0.74455619, 0.61200351, 0.43996775],
                        [0.63054210, 0.51812100, 0.37331769],
                        [0.51466727, 0.42153466, 0.29906410],
                        [0.37171054, 0.30395758, 0.20983726],
                        [0.26531571, 0.21593873, 0.14360215],
                        [0.16383056, 0.13378082, 0.08097480],
                    ],
                ),
            ),
            (
                np.array(
                    [
                        [0.24887842, 0.15303747, 0.08212616],
                        [0.41606936, 0.25704649, 0.15554601],
                        [0.21573794, 0.19969735, 0.18036437],
                        [0.19700749, 0.17282481, 0.06601980],
                        [0.27340323, 0.20337079, 0.19491209],
                        [0.23491897, 0.28985065, 0.19005764],
                        [0.45789737, 0.23304574, 0.05214758],
                        [0.17908031, 0.16008465, 0.20729132],
                        [0.39573598, 0.16691849, 0.11239551],
                        [0.19287089, 0.10994958, 0.11457524],
                        [0.31488585, 0.29156134, 0.01948227],
                        [0.43320373, 0.25899616, 0.00871194],
                        [0.13852786, 0.12482940, 0.17608537],
                        [0.18533486, 0.24485032, 0.07610976],
                        [0.35295719, 0.13125142, 0.07479467],
                        [0.46251380, 0.32267866, 0.00188992],
                        [0.37160829, 0.15808560, 0.16385144],
                        [0.11490965, 0.20017006, 0.18578541],
                        [0.50275546, 0.41144696, 0.29024220],
                        [0.41369301, 0.33511353, 0.23674881],
                        [0.32926032, 0.26507148, 0.18402646],
                        [0.23766708, 0.18695265, 0.12535509],
                        [0.16787136, 0.13122515, 0.08452621],
                        [0.10730225, 0.07956661, 0.04697328],
                    ],
                ),
            ),
            (
                np.array(
                    [
                        [0.34836826, 0.22215524, 0.12135284],
                        [0.58325237, 0.37308872, 0.23444822],
                        [0.31704697, 0.30355555, 0.27795714],
                        [0.30426627, 0.27464610, 0.11857683],
                        [0.42129153, 0.32407933, 0.30909172],
                        [0.35933307, 0.43667969, 0.29267272],
                        [0.62412459, 0.32705662, 0.07551479],
                        [0.25816506, 0.23593378, 0.30402777],
                        [0.57699001, 0.25525075, 0.17735666],
                        [0.30067790, 0.18355943, 0.18990313],
                        [0.48428565, 0.45408702, 0.05068365],
                        [0.64917630, 0.39918983, 0.02770220],
                        [0.18815944, 0.17596889, 0.24910960],
                        [0.26274660, 0.35171160, 0.11372098],
                        [0.51511449, 0.20301704, 0.11943004],
                        [0.69010550, 0.49270925, 0.00358405],
                        [0.56560254, 0.25560325, 0.26505449],
                        [0.19258839, 0.31733096, 0.29525691],
                        [0.69754463, 0.57014823, 0.40287429],
                        [0.58907270, 0.48075455, 0.34047469],
                        [0.48401541, 0.39298880, 0.27514425],
                        [0.36163613, 0.29068086, 0.19965295],
                        [0.26967442, 0.21660130, 0.14631520],
                        [0.17994609, 0.14269032, 0.09328640],
                    ],
                ),
            ),
            (
                np.array(
                    [
                        [0.22017804, 0.12826383, 0.05788412],
                        [0.38693318, 0.23539165, 0.13782480],
                        [0.19914666, 0.18839033, 0.17261186],
                        [0.19430259, 0.17250592, 0.06102788],
                        [0.28009716, 0.21341877, 0.20753020],
                        [0.24569865, 0.30791867, 0.20637228],
                        [0.42701599, 0.21082541, 0.03257031],
                        [0.16083929, 0.14465059, 0.19211331],
                        [0.39257592, 0.16077888, 0.10590190],
                        [0.19661152, 0.11140312, 0.11799492],
                        [0.33920571, 0.31840333, 0.02249028],
                        [0.48388398, 0.29522106, 0.01101061],
                        [0.11242500, 0.10284122, 0.15103099],
                        [0.17404874, 0.23030786, 0.06279272],
                        [0.35536617, 0.12874892, 0.06993287],
                        [0.48747075, 0.34067380, 0.00159611],
                        [0.40709862, 0.17631432, 0.18579389],
                        [0.13446636, 0.23369668, 0.22029275],
                        [0.48294312, 0.38067934, 0.25635651],
                        [0.41376853, 0.32718080, 0.22381625],
                        [0.34264213, 0.27225804, 0.18502168],
                        [0.25755507, 0.20134068, 0.13364507],
                        [0.19580546, 0.15502162, 0.10322439],
                        [0.13540818, 0.10658601, 0.06714674],
                    ],
                ),
            ),
        ]

        for i, png_file in enumerate(PNG_FILES):
            np.testing.assert_allclose(
                detect_colour_checkers_segmentation(read_image(png_file)),
                test_swatches[i],
                atol=0.0001,
            )

        (
            swatch_colours,
            colour_checker_image,
            swatch_masks,
        ) = detect_colour_checkers_segmentation(
            read_image(PNG_FILES[0]), additional_data=True
        )[
            0
        ].values

        np.testing.assert_allclose(
            swatch_colours,
            test_swatches[0][0],
            atol=0.0001,
        )

        np.testing.assert_allclose(
            colour_checker_image.shape[0:2],
            (105, 155),
            atol=5,
        )

        np.testing.assert_allclose(
            swatch_masks,
            (
                ([5, 21, 4, 20]),
                ([5, 21, 30, 46]),
                ([5, 21, 56, 72]),
                ([5, 21, 82, 98]),
                ([5, 21, 108, 124]),
                ([5, 21, 134, 150]),
                ([31, 47, 4, 20]),
                ([31, 47, 30, 46]),
                ([31, 47, 56, 72]),
                ([31, 47, 82, 98]),
                ([31, 47, 108, 124]),
                ([31, 47, 134, 150]),
                ([57, 73, 4, 20]),
                ([57, 73, 30, 46]),
                ([57, 73, 56, 72]),
                ([57, 73, 82, 98]),
                ([57, 73, 108, 124]),
                ([57, 73, 134, 150]),
                ([83, 99, 4, 20]),
                ([83, 99, 30, 46]),
                ([83, 99, 56, 72]),
                ([83, 99, 82, 98]),
                ([83, 99, 108, 124]),
                ([83, 99, 134, 150]),
            ),
            atol=5,
        )


if __name__ == "__main__":
    unittest.main()
